<?xml version="1.0" ?>
<settings>
  <acc>None</acc>
  <adjusted_params>['Na_BG_act_inact_shift 0', 'gmax_K_DRS4_params_voltage_dep_dend 1', 'gmax_Na_BG_soma 2', 'gmax_K_DRS4_params_voltage_dep_soma 3', 'gmax_K_DRS4_params_voltage_dep_axon 4', 'gmax_Leak_pyr 5', 'H_ratio 6', 'e_Leak_pyr 7', 'gbar_km_soma_dend 8', 'gbar_km_axon 9', 'KA_ratio 10', 'gbar_kd 11', 'pbar_CaN 12', 'gmax_bk 13', 'CaL_ratio 14', 'gmax_K_AHP 15', 'pbar_car 16', 'cat_ratio 17', 'cat31_33_ratio 18', 'gk_SK 19']</adjusted_params>
  <base_dir>/home/mohacsi/Desktop/optimizer/optimizer/new_test_files/Luca_modell_new</base_dir>
  <boundaries>[[5.0, 0.01, 0.02, 0.01, 0.01, 5e-07, 1.0, -70.0, 5e-06, 0.0005, 1.0, 0.0001, 0.002, 0.001, 0.1, 1e-05, 0.001, 0.5, 0.5, 0.0004], [15.0, 0.2, 0.1, 0.5, 1.0, 1e-05, 15.0, -40.0, 0.0005, 0.01, 5.0, 0.01, 0.02, 0.1, 3.0, 0.001, 0.02, 5.0, 10.0, 0.04]]</boundaries>
  <cognitive_rate>None</cognitive_rate>
  <cooling_rate>None</cooling_rate>
  <crossover_rate>None</crossover_rate>
  <evo_strat>Particle Swarm - Pygmo</evo_strat>
  <f_tol>None</f_tol>
  <feats>Spikecount, inv_last_ISI</feats>
  <force_bounds>False</force_bounds>
  <inertia>None</inertia>
  <init_temp>None</init_temp>
  <input_cont_t>None</input_cont_t>
  <input_dir>/home/mohacsi/Desktop/optimizer/optimizer/new_test_files/Luca_modell_new/opt_data_JMakara_OUR_features_selected_stim.json</input_dir>
  <input_freq>None</input_freq>
  <input_length>None</input_length>
  <input_scale>mV</input_scale>
  <input_size>6</input_size>
  <m_gauss>None</m_gauss>
  <max_evaluation>2.0</max_evaluation>
  <model_path>/home/mohacsi/Desktop/optimizer/optimizer/new_test_files/Luca_modell_new/load_model_na_inhomo_minimal_model_full_soma_f_fact_true_diam_active_spine_KA_fact.hoc</model_path>
  <model_spec_dir>/home/mohacsi/Desktop/optimizer/optimizer/new_test_files/Luca_modell_new</model_spec_dir>
  <mutation_rate>None</mutation_rate>
  <neighborhood_size>None</neighborhood_size>
  <num_islands>1.0</num_islands>
  <num_iter>None</num_iter>
  <num_params>20</num_params>
  <num_repet>None</num_repet>
  <number_of_cpu>2</number_of_cpu>
  <param_vals>[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]</param_vals>
  <pop_size>2.0</pop_size>
  <run_controll_dt>0.05</run_controll_dt>
  <run_controll_pos>0.5</run_controll_pos>
  <run_controll_record>v</run_controll_record>
  <run_controll_sec>dendrite[1]</run_controll_sec>
  <run_controll_tstop>600.0</run_controll_tstop>
  <run_controll_vrest>-65.0</run_controll_vrest>
  <seed>1234</seed>
  <sim_command>&quot;&quot;</sim_command>
  <simulator>Neuron</simulator>
  <social_rate>None</social_rate>
  <spike_thres>0.0</spike_thres>
  <spike_window>None</spike_window>
  <start_time_stamp>1614957081.7328193</start_time_stamp>
  <starting_points>None</starting_points>
  <std_gauss>None</std_gauss>
  <step_size>None</step_size>
  <stim_amp>[-0.25, 0.05, 0.1, 0.15, 0.2, 0.25]</stim_amp>
  <stim_del>200.0</stim_del>
  <stim_dur>300.0</stim_dur>
  <stim_pos>0.5</stim_pos>
  <stim_sec>dendrite[1]</stim_sec>
  <stim_type>IClamp</stim_type>
  <temperature>None</temperature>
  <type>['features', 'features']</type>
  <u_fun_string>#Please define your function below in the template!
#You may choose an arbitrary name for your function,
#but the input parameters must be self and a vector!In the first line of the function specify the length of the vector in a comment!
#In the second line you may specify the names of the parameters in a comment, separated by spaces.
def usr_fun(self,v):
#20
#Na_BG_act_inact_shift 0
#gmax_K_DRS4_params_voltage_dep_dend 1
#gmax_Na_BG_soma 2
#gmax_K_DRS4_params_voltage_dep_soma 3
#gmax_K_DRS4_params_voltage_dep_axon 4
#gmax_Leak_pyr 5
#H_ratio 6
#e_Leak_pyr 7
#gbar_km_soma_dend 8
#gbar_km_axon 9
#KA_ratio 10
#gbar_kd 11 
#pbar_CaN 12
#gmax_bk 13
#CaL_ratio 14
#gmax_K_AHP 15 
#pbar_car 16  
#cat_ratio 17 
#cat31_33_ratio 18 
#gk_SK 19
    for sec in h.all_dendrites:
		
        sec.Y_v0_Na_BG_dend = sec.X_v0_Na_BG_dend-v[0]
        sec.gmax_K_DRS4_params_voltage_dep = v[1]
        sec.gbar_km_q10_2 = v[8] 
        sec.pbar_car = v[16]  
        for seg in sec:
                h('soma distance()')
                dist=(h.distance(seg.x))
				
                seg.gmax_Na_BG_dend = (v[2]+v[2]*(-0.00125)*dist)
                seg.gk_sKCa = (v[19]+v[19]*(0.00002)*dist)
        
                if (dist&gt;100) and (dist&lt;=150):
                        seg.gmax_H_CA1pyr_dist=(v[6]*0.00002+v[6]*4e-07*dist)
                        seg.gmax_H_CA1pyr_prox=0
                        seg.gmax_K_A_prox=0
                        seg.gmax_K_A_dist=(0.0035*v[10]+v[10]*5.5e-05*dist)
                        seg.pbar_CaL_pool2_ghk=(0.002*v[14]+v[14]*(-1.3333e-05)*dist)
                elif (dist&gt;150.0) and (dist&lt;=400.0):
                        seg.gmax_H_CA1pyr_dist=(v[6]*0.00002+v[6]*4e-07*dist)
                        seg.gmax_H_CA1pyr_prox=0
                        seg.gmax_K_A_prox=0
                        seg.gmax_K_A_dist=(0.0035*v[10]+v[10]*5.5e-05*dist)
                        seg.pbar_CaL_pool2_ghk=(0.002*v[14]+v[14]*(-1.3333e-05)*150)
                elif (dist&lt;=100.0) and (dist&gt;0.0):
                        seg.gmax_H_CA1pyr_dist=0
                        seg.gmax_H_CA1pyr_prox=(v[6]*0.00002+v[6]*4e-07*dist)
                        seg.gmax_K_A_prox=(0.0035*v[10]+v[10]*5.5e-05*dist)
                        seg.gmax_K_A_dist=0
                        seg.pbar_CaL_pool2_ghk=(0.002*v[14]+v[14]*(-1.3333e-05)*dist)
                elif (dist&gt;400.0):
                        seg.gmax_H_CA1pyr_dist=0.00018*v[6]
                        seg.gmax_H_CA1pyr_prox=0
                        seg.gmax_K_A_prox=0
                        seg.gmax_K_A_dist=0.0255*v[10]
                        seg.pbar_CaL_pool2_ghk=(0.002*v[14]+v[14]*(-1.3333e-05)*150)
                elif (dist&lt;=0.0):
                        seg.gmax_H_CA1pyr_prox=0.00002*v[6]
                        seg.gmax_H_CA1pyr_dist=0
                        seg.gmax_K_A_prox=0.0035*v[10]
                        seg.gmax_K_A_dist=0
                        seg.pbar_CaL_pool2_ghk=0.002*v[14]
    for sec in h.oblique_dendrites:
        sec.pbar_cat31 = sec.pbar_cat31* v[17]  
        sec.pbar_cat32 = sec.pbar_cat32* v[17] 
        sec.pbar_cat33 = sec.pbar_cat33* v[17] *v[18]
    for sec in h.trunk:
        sec.pbar_cat31 = sec.pbar_cat31* v[17] 
        sec.pbar_cat32 = sec.pbar_cat32* v[17] 
        sec.pbar_cat33 = sec.pbar_cat33* v[17] *v[18]
    for sec in h.basal_dendrites:
        sec.pbar_cat31 = sec.pbar_cat31* v[17] 
        sec.pbar_cat32 = sec.pbar_cat32* v[17] 
        sec.pbar_cat33 = sec.pbar_cat33* v[17] *v[18]
    for sec in h.tuft:
        sec.pbar_cat31 = sec.pbar_cat31* v[17] 
        sec.pbar_cat32 = sec.pbar_cat32* v[17] 
        sec.pbar_cat33 = sec.pbar_cat33* v[17] *v[18]
    for sec in h.soma:
        sec.gmax_Na_BG_soma = v[2]
        sec.Y_v0_Na_BG_soma = sec.X_v0_Na_BG_soma-v[0]
        sec.gmax_K_DRS4_params_voltage_dep = v[3]
        sec.gmax_H_CA1pyr_prox = 0.00002*v[6] 
        sec.gbar_km_q10_2 = v[8]    
        sec.gmax_K_A_prox=0.0035*v[10] 
        sec.gkd_kd_params3=v[11]
        sec.pbar_CaN_BG_pool2_ghk=v[12]
        sec.gbar_bk_ch_pool=v[13]
        sec.pbar_CaL_pool2_ghk=0.00021*v[14]
        sec.gmax_K_AHP3_lpool = v[15]  
        sec.pbar_cat31 = sec.pbar_cat31*v[17] 
        sec.pbar_cat32 = sec.pbar_cat32*v[17] 
        sec.pbar_cat33 = sec.pbar_cat33* v[17]*v[18]  
        sec.gk_sKCa = v[19]  
    for sec in h.all_axon:
        sec.gmax_Na_BG_axon = v[2]*40
        sec.Y_v0_Na_BG_axon = sec.X_v0_Na_BG_axon-v[0]
        sec.gmax_K_DRS4_params_voltage_dep = v[4]
        sec.gmax_H_CA1pyr_prox = 0.00002*v[6]
        sec.gbar_km_q10_2 = v[9]
        sec.gmax_K_A_prox=0.0035*v[10]
    for sec in h.all:
        sec.gmax_Leak_pyr = v[5]
        sec.e_Leak_pyr = v[7]
        sec.cm = 1
        sec.Ra = 100
    h.add_F_factor_to_all_dendrites()</u_fun_string>
  <update_freq>None</update_freq>
  <weights>[0.5, 0.5]</weights>
  <x_tol>None</x_tol>
</settings>

//initializing the CA1 PC

load_file("nrngui.hoc")

xopen("parameters.hoc")
xopen("morphology_131117-C2.hoc")
xopen("biophys.hoc")
xopen("spine.hoc")
xopen("procedures.hoc")

//init()

proc init_panel(){
	xpanel("test")
		xlabel("*****************NOTE********************")
		xlabel("If you want to set a new Rm distribution,")
		xlabel("close the previously opened panel and")
		xlabel("open a new one!")
		xlabel("********************************************")
		
		xmenu("set Rm")
				xbutton("constant Rm", "setConstantRm()")
				xbutton("+ linear Rm", "setLinearIncRm()")
				xbutton("- linear Rm", "setLinearDecRm()")
				xbutton("+ sigmoid Rm", "setSigmoidIncRm()")
				xbutton("- sigmoid Rm", "setSigmoidDecRm()")
	//			xbutton("+ exponential Rm", "setExponentialIncRm()")
	//			xbutton("- exponential Rm", "setExponentialDecRm()")
		xmenu()

		
		xlabel("Setting the d_lambda parameter")
		xvalue("d_lambda", "d_lambda", 1, "set_nseg()", 0, 0)
		xbutton("reset nseg to 1", "reset_nseg()")
		xbutton("validate", "segmentValidation()")
		xbutton("save Rm data", "save_data()")
		xbutton("Adding Spines", "addAndVisualizeSpineLoc()")
		xlabel("Current clamp protocols")
		xbutton("IC3_passive - soma", "IC3_passive()")
		xbutton("IC3_passive - apic at 105 um", "IC3_passive_dend_100um()")
		xbutton("IC3_passive - apic at 200 um", "IC3_passive_dend_200um()")
		xbutton("IC3_passive - nexus at 331 um", "IC3_passive_nexus()")
		xbutton("IC5_zap", "IC5_zap()")
		xlabel("Attenuation measurements on the apical&oblique dendrites")
		xbutton("CF Attenuation", "voltAttCentrifugal_apicalOblique()")
		xbutton("CP Attenuation", "voltAttCentripetal_apicalOblique()")
		xlabel("Attenuation measurements on the basal dendrites")
		xbutton("CF Attenuation", "voltAttCentrifugal_basal()")
		xbutton("CP Attenuation", "voltAttCentripetal_basal()")
		xlabel("Soma-dendritic & dendro-somatic recording")
		xbutton("Dual recording", "soma_dend_IC3()")
	//	xbutton("Syn Cond", "synCond()")
	xpanel()
}


objref distanceMatrix, outFile

proc save_data(){

	distanceMatrix = new Matrix()
	
	distanceMatrix.resize(CorrVec.size(), 3)
	distanceMatrix.setcol(0, distVec)
	distanceMatrix.setcol(1, CorrVec)
	distanceMatrix.setcol(2, g_pasVec)
	
	outFile = new File()
	
	strdef outFileName
	
	if(isConstant){
		sprint(outFileName, "ConstantRm_base=%g.dat", user_Rm)
	}
	if(isLinearInc){
		sprint(outFileName, "LinearIncRm_soma=%g_const=%g.dat", user_Rm, linIncConst)
	}
	if(isLinearDec){
		sprint(outFileName, "LinearDecRm_soma=%g_const=%g.dat", user_Rm, linDecConst)
	}
	if(isSigmoidInc){
		sprint(outFileName, "SigmoidIncRm_min=%g_max=%g_const=%g_steep=%g.dat", user_Rm, sigmMaxRm, sigmDistConst, sigmSteepConst)
	}
	if(isSigmoidDec){
		sprint(outFileName, "SigmoidDecRm_max=%g_min=%g_const=%g_steep=%g.dat", sigmMaxRm, user_Rm, sigmDistConst, sigmSteepConst)
	}
	if(isExponentialInc){
		sprint(outFileName, "ExponentialIncRm_soma=%g_const=%g.dat", user_Rm, expConst)
	}
	if(isExponentialDec){
		sprint(outFileName, "ExponentialDecRm_soma=%g_const=%g.dat", user_Rm, expConst)
	}
	
	outFile.wopen(outFileName)
	distanceMatrix.fprint(outFile, " %g")
	outFile.close()
	
	print "saving process is finished"
}

isConstant = 1
cvode.active(1)
user_e_pas = 0
v_init = 0
//init_panel()

//initializing the membrane parameters of the CA1 PC

func lambda_f() { local i, x1, x2, d1, d2, lam
        if (n3d() < 2) {
                return 1e5*sqrt(diam/(4*PI*$1*Ri*Cm))
        }
// above was too inaccurate with large variation in 3d diameter
// so now we use all 3-d points to get a better approximate lambda
        x1 = arc3d(0)
        d1 = diam3d(0)
        lam = 0
        for i=1, n3d()-1 {
                x2 = arc3d(i)
                d2 = diam3d(i)
                lam += (x2 - x1)/sqrt(d1 + d2)
                x1 = x2   d1 = d2
        }
        //  length of the section in units of lambda
        lam *= sqrt(2) * 1e-5*sqrt(4*PI*$1*user_Ra*user_Cm)

        return L/lam
}


//custom built initialization for the proper compartmental values

proc set_nseg(){

	soma area(0.5) // make sure diam reflects 3d points
	forall { nseg = int((L/(d_lambda*lambda_f(freq))+0.9)/2)*2 + 1  }
	print "d_lambda = ", d_lambda, "is set"
}

proc reset_nseg(){

	forall {
		nseg = 1
	}
	print "d_lambda rule is not applied, nseg = 1"
}

proc segmentValidation(){

	access soma {distance()}
	
	forall {
		for(x,0){
			print "name: ", secname(), " distance: ", distance(x), " nseg: ", nseg, " Rm : ", 1/g_pas(x)
		}
	}
}

//Procedures which set the proper distribution of Rm according to the functions (constant/linear+-/sigmoidal+-/exponential+-)

proc setConstRm(){
	$&1 = 1.0/user_Rm
}

proc setLinIncRm(){
	$&1 = 1.0/(user_Rm+(linIncConst*distance(x)))
}

proc setLinDecRm(){
	$&1 = 1.0/(user_Rm-(linDecConst*distance(x)))
}

proc setSigmIncRm(){
	$&1 = 1.0/(user_Rm+(user_Rm*(sigmMaxConst/(1+exp((sigmDistConst-distance(x))/sigmSteepConst)))))
}

proc setSigmDecRm(){
	$&1 = 1.0/(user_Rm+(user_Rm*(sigmMaxConst/(1+exp(-(sigmDistConst-distance(x))/sigmSteepConst)))))
}

proc setExpIncRm(){
	$&1 = 1.0/(user_Rm*exp(distance(x)*expConst))
}

proc setExpDecRm(){
	$&1 = 1.0/(user_Rm*exp(-(distance(x)*expConst)))
}

//Procedures which set the proper distributions of different active conductances inserted into the model

proc setConstCond(){
	$&1 = user_cond_h
}

objref CorrVec, g_pasVec, distVec

proc setConstantRm(){
	CorrVec = new Vector()
	g_pasVec = new Vector()
	distVec = new Vector()
	
	isConstant = 1
	isLinearInc = 0
	isLinearDec = 0
	isSigmoidInc = 0
	isSigmoidDec = 0
	isExponentialInc = 0
	isExponentialDec = 0
	
	access soma {distance()}
	
	xpanel("Constant Rm")
		xlabel("Rm_soma will be applied to all compartments")
		xvalue("Rm_soma", "user_Rm", 1, "", 0, 0)
		xbutton("Set Rm", "setRm()")
	xpanel()
}

proc setLinearIncRm(){
	CorrVec = new Vector()
	g_pasVec = new Vector()
	distVec = new Vector()
	
	isConstant = 0
	isLinearInc = 1
	isLinearDec = 0
	isSigmoidInc = 0
	isSigmoidDec = 0
	isExponentialInc = 0
	isExponentialDec = 0
	
	xpanel("Linearly increasing Rm")
		xlabel("Somatic Rm")
		xvalue("Rm_soma", "user_Rm", 1, "", 0, 0)
		xlabel("Rm = Rm_soma+(inc_const*path_distance)")
		xvalue("Increasing Const", "linIncConst", 1, "", 0, 0)
		xbutton("Set Rm", "setRm()")
	xpanel()
}

proc setLinearDecRm(){
	CorrVec = new Vector()
	g_pasVec = new Vector()
	distVec = new Vector()
	
	isConstant = 0
	isLinearInc = 0
	isLinearDec = 1
	isSigmoidInc = 0
	isSigmoidDec = 0
	isExponentialInc = 0
	isExponentialDec = 0
	
	xpanel("Linearly decreasing Rm")
		xlabel("Somatic Rm")
		xvalue("Rm_soma", "user_Rm", 1, "", 0, 0)
		xlabel("Rm = Rm_base-(dec_const*path_distance)")
		xvalue("Decreasing Const", "linDecConst", 1, "", 0, 0)
		xbutton("Set Rm", "setRm()")
	xpanel()
}

proc setSigmoidDecRm(){
	CorrVec = new Vector()
	g_pasVec = new Vector()
	distVec = new Vector()
	
	isConstant = 0
	isLinearInc = 0
	isLinearDec = 0
	isSigmoidInc = 0
	isSigmoidDec = 1
	isExponentialInc = 0
	isExponentialDec = 0
	
	xpanel("Sigmoidally decreasing Rm")
		xlabel("*****************************************************************************************")
		xlabel("Rm = Rm_soma+(Rm_soma*(sigmMaxConst/(1+exp(-(sigmDistConst-distance(x))/sigmSteepConst))))")
		xlabel("sigmMaxConst = (Rm_max-Rm_min)/Rm_min")
		xlabel("Rm max is the somatic Rm")
		xlabel("*****************************************************************************************")
		xvalue("Rm min", "user_Rm", 1, "", 0, 0)
		xvalue("Rm max", "sigmMaxRm", 1, "", 0, 0)
		xvalue("Const", "sigmDistConst", 1, "", 0, 0)
		xvalue("Steep", "sigmSteepConst", 1, "", 0, 0)
		//xvalue("Max", "sigmMaxConst", 1, "", 0, 0)
		xbutton("Set Rm", "setRm()")
	xpanel()
}

proc setSigmoidIncRm(){
	CorrVec = new Vector()
	g_pasVec = new Vector()
	distVec = new Vector()
	
	isConstant = 0
	isLinearInc = 0
	isLinearDec = 0
	isSigmoidInc = 1
	isSigmoidDec = 0
	isExponentialInc = 0
	isExponentialDec = 0
	
	xpanel("Sigmoidally increasing Rm")
		xlabel("*****************************************************************************************")
		xlabel("Rm = Rm_soma+(Rm_soma*(sigmMaxConst/(1+exp((sigmDistConst-distance(x))/sigmSteepConst))))")
		xlabel("sigmMaxConst = (Rm_max-Rm_min)/Rm_min")
		xlabel("Rm min is the somatic Rm")
		xlabel("*****************************************************************************************")
		xvalue("Rm min", "user_Rm", 1, "", 0, 0)
		xvalue("Rm max", "sigmMaxRm", 1, "", 0, 0)
		xvalue("Const", "sigmDistConst", 1, "", 0, 0)
		xvalue("Steep", "sigmSteepConst", 1, "", 0, 0)
		//xvalue("Max", "sigmMaxConst", 1, "", 0, 0)
		xbutton("Set Rm", "setRm()")
	xpanel()
}

proc setExponentialIncRm(){
	CorrVec = new Vector()
	g_pasVec = new Vector()
	distVec = new Vector()
	
	isConstant = 0
	isLinearInc = 0
	isLinearDec = 0
	isSigmoidInc = 0
	isSigmoidDec = 0
	isExponentialInc = 1
	isExponentialDec = 0
	
	xpanel("Exponentially increasing Rm")
		xlabel("Somatic Rm")
		xvalue("Rm_soma", "user_Rm", 1, "", 0, 0)
		xlabel("Rm = Rm_base*exp(path_distance*expConst)")
		xvalue("Exponential Const", "expConst", 1, "", 0, 0)
		xbutton("Set Rm", "setRm()")
	xpanel()
}

proc setExponentialDecRm(){
	CorrVec = new Vector()
	g_pasVec = new Vector()
	distVec = new Vector()
	
	isConstant = 0
	isLinearInc = 0
	isLinearDec = 0
	isSigmoidInc = 0
	isSigmoidDec = 0
	isExponentialInc = 0
	isExponentialDec = 1
	
	xpanel("Exponentially decreasing Rm")
		xlabel("Somatic Rm")
		xvalue("Rm_soma", "user_Rm", 1, "", 0, 0)
		xlabel("Rm = Rm_base*exp(-(path_distance*expConst))")
		xvalue("Exponential Const", "expConst", 1, "", 0, 0)
		xbutton("Set Rm", "setRm()")
	xpanel()
}


proc setRm(){
	CorrVec = new Vector()
	g_pasVec = new Vector()
	distVec = new Vector()

	access soma { distance()}
	forall{
		for(x,0){
			if(isConstant){
				setConstRm(&g_pas(x))
			}
			if(isLinearInc){
				setLinIncRm(&g_pas(x))
			}
			if(isLinearDec){
				setLinDecRm(&g_pas(x))
			}
			if(isSigmoidInc){
				sigmMaxConst = (sigmMaxRm-user_Rm)/user_Rm
				setSigmIncRm(&g_pas(x))
			}
			if(isSigmoidDec){
				sigmMaxConst = (sigmMaxRm-user_Rm)/user_Rm
				setSigmDecRm(&g_pas(x))
			}
			if(isExponentialInc){
				setExpIncRm(&g_pas(x))
			}
			if(isExponentialDec){
				setExpDecRm(&g_pas(x))
			}

			g_pasVec.append(g_pas(x))
			CorrVec.append(1/g_pas(x))
			distVec.append(distance(x))
		}
		x = 0
	}
	
	if(isConstant){
		print "**********"
		print "Constant Rm distribution"
		print "**********"
	}
	if(isLinearInc){
		print "**********"
		print "Linearly increasing Rm distribution"
		print "**********"
	}
	if(isLinearDec){
		print "**********"
		print "Linearly decreasing Rm distribution"
		print "**********"
	}
	if(isSigmoidInc){
		print "**********"
		print "Sigmoidally increasing Rm distribution"
		print "**********"
	}
	if(isSigmoidDec){
		print "**********"
		print "Sigmoidally decreasing Rm distribution"
		print "**********"
	}
	if(isExponentialInc){
		print "**********"
		print "Exponentially increasing Rm distribution"
		print "**********"
	}
	if(isExponentialDec){
		print "**********"
		print "Exponentially decreasing Rm distribution"
		print "**********"
	}
}

proc init(){

	forall{
		Ra = user_Ra
		cm = user_Cm
		v = -65
		e_pas = user_e_pas
	}

	set_nseg()
	setRm()
	
	finitialize(v_init)
    if (cvode.active()) {
      cvode.re_init()
    } else {
      fcurrent()
    }
    frecord_init()
}

objref stim1, stim2, stim3, stim4, stim5

proc IC3_passive(){

	tstop = 2800

	access soma

	stim1 = new IClamp(0.5)
	stim2 = new IClamp(0.5)
	stim3 = new IClamp(0.5)
	stim4 = new IClamp(0.5)
	
	stim1.del = 200
	stim1.amp = 0.5
	stim1.dur = 3
	
	stim2.del = 503
	stim2.amp = 0.01
	stim2.dur = 600
	
	stim3.del = 1603
	stim3.amp = -0.5
	stim3.dur = 3
	
	stim4.del = 1906
	stim4.amp = -0.01
	stim4.dur = 600
}

proc IC3_passive_nexus(){

	tstop = 2800

	access apic[35]	//distance from centre of the soma: 331 um

	stim1 = new IClamp(0.5)
	stim2 = new IClamp(0.5)
	stim3 = new IClamp(0.5)
	stim4 = new IClamp(0.5)
	
	stim1.del = 200
	stim1.amp = 0.5
	stim1.dur = 1
	
	stim2.del = 503
	stim2.amp = 0.01
	stim2.dur = 600
	
	stim3.del = 1603
	stim3.amp = -0.5
	stim3.dur = 1
	
	stim4.del = 1906
	stim4.amp = -0.01
	stim4.dur = 600	
}

proc IC3_passive_dend_100um(){

	tstop = 2800

	access apic[12]	//distance from centre of the soma: 105 um

	stim1 = new IClamp(0.5)
	stim2 = new IClamp(0.5)
	stim3 = new IClamp(0.5)
	stim4 = new IClamp(0.5)
	
	stim1.del = 200
	stim1.amp = 0.5
	stim1.dur = 1
	
	stim2.del = 503
	stim2.amp = 0.01
	stim2.dur = 600
	
	stim3.del = 1603
	stim3.amp = -0.5
	stim3.dur = 1
	
	stim4.del = 1906
	stim4.amp = -0.01
	stim4.dur = 600	
}

proc IC3_passive_dend_200um(){

	tstop = 2800

	access apic[23]	//distance from centre of the soma: 200 um

	stim1 = new IClamp(0.5)
	stim2 = new IClamp(0.5)
	stim3 = new IClamp(0.5)
	stim4 = new IClamp(0.5)
	
	stim1.del = 200
	stim1.amp = 0.5
	stim1.dur = 1
	
	stim2.del = 503
	stim2.amp = 0.01
	stim2.dur = 600
	
	stim3.del = 1603
	stim3.amp = -0.5
	stim3.dur = 1
	
	stim4.del = 1906
	stim4.amp = -0.01
	stim4.dur = 600	
}



proc soma_dend_IC3(){localobj somaV_CF, somaV_CP, dendV1_CF, dendV2_CF, dendV3_CF, dendV_CP, time_CF, time_CP, dataMatrix, OutFile
	
	
	somaV_CF = new Vector()
	somaV_CP = new Vector()
	dendV1_CF = new Vector()
	dendV2_CF = new Vector()
	dendV3_CF = new Vector()
	dendV_CP = new Vector()
	time_CF = new Vector()
	time_CP = new Vector()
	
	IC3_passive()
	
	somaV_CF.record(&soma.v(0.5))
	dendV1_CF.record(&apic[12].v(0.5))
	dendV2_CF.record(&apic[23].v(0.5))
	dendV3_CF.record(&apic[35].v(0.5)) //distance is 331 um from soma
	time_CF.record(&t)
	
	run()
	
	dataMatrix = new Matrix(time_CF.size(), 5)
	dataMatrix.setcol(0, time_CF)
	dataMatrix.setcol(1, somaV_CF)
	dataMatrix.setcol(2, dendV1_CF)
	dataMatrix.setcol(3, dendV2_CF)
	dataMatrix.setcol(4, dendV3_CF)
	
	OutFile = new File()
	
	strdef OutFileName
	
	sprint(OutFileName, "Soma-dend-recording_Ra=%d_Ohmcm_Rm=%d_Ohmcm2.dat", user_Ra, user_Rm)
	OutFile.wopen(OutFileName)
	dataMatrix.fprint(OutFile, " %g")
	OutFile.close()
	
	print "done"

/*	
	IC3_passive_nexus()
	
	somaV_CP.record(&soma.v(0.5))
	dendV_CP.record(&apic[35].v(0.5))
	time_CP.record(&t)
	
	run()
	
	dataMatrix = new Matrix(time_CP.size(), 3)
	dataMatrix.setcol(0, time_CP)
	dataMatrix.setcol(1, somaV_CP)
	dataMatrix.setcol(2, dendV_CP)
	
	OutFile = new File()
	
	strdef OutFileName
	
	sprint(OutFileName, "Dend-soma-recording_Ra=%d_Ohmcm_Rm=%d_Ohmcm2.dat", user_Ra, user_Rm)
	OutFile.wopen(OutFileName)
	dataMatrix.fprint(OutFile, " %g")
	OutFile.close()
*/
}

/*
proc IC5_zap(){

	tstop = 2500
	objref stim1, stim2, stim3, stim4, stim5

	access soma

	stim1 = new Izap(0.5)
	
	stim1.del = 50
	stim1.amp = 0.03
	stim1.dur = 2000
	stim1.f0 = 1
	stim1.f1 = 50
	
	xpanel("Zap parameters")
	xlabel("Zap protocol parameters")
	xvalue("Delay", "stim1.del")
	xvalue("Duration", "stim1.dur")
	xvalue("Amplitude", "stim1.amp")
	xvalue("f0", "stim1.f0")
	xvalue("f1", "stim1.f1")
	xpanel()
}
*/

proc findSegofSecs(){

	sumOfSections = 0
	sumOfSegments = 0

	forall{
		for(x,0){
			sumOfSegments += 1
		}
		sumOfSections += 1
	}
	
	print "total number of sections: ", sumOfSections
	print "total number of segments: ", sumOfSegments
}

objref dendList, seg

proc createList(){
	
	dendList = new List()
	
	for(i=0; i<ndend; i+=1){
		dend[i] seg = new SectionRef()
		dendList.append(seg)
	}
	
	print "List() of denritic segments is created"
	
	for(i=0; i<dendList.count(); i+=1){
		dendList.o(i).sec {psection()}
	}
}

func calcDendSegm(){

	sumOfBasalDendSegm = 0
	sumOfApicalDendSegm = 0
	sumOfObliqueDendSegm = 0

	for(i=0; i<ndend; i+=1){
		access dend[i]{
			for(x,0){
				sumOfBasalDendSegm += 1
			}
		}
	}
	
	for(i=0; i<napic; i+=1){
		access apic[i]{
			for(x,0){
				sumOfApicalDendSegm += 1
			}
		}
	}
	
/*	
	print "total # of basal dendritic segments: ", sumOfBasalDendSegm
	print "total # of apical dendritic segments: ", sumOfApicalDendSegm
	print "total # of oblique dendritic segments: ", sumOfObliqueDendSegm
*/
	return 0
}

objref apicalSpineList, basalSpineList, obliqueSpineList, apicalSpine[1e5], basalSpine[1e5], obliqueSpine[1e5]
apicalSpineList = new SectionList()
basalSpineList = new SectionList()
obliqueSpineList = new SectionList()

proc addApicalSpines(){
	
	destroyApicalSpines()	//destroy the previously created spines, if they exists

	q = 0
	while(q < sumOfApicalDendSegm){
		for(i=0; i<napic; i+=1){ 
			for (j=(1/apic[i].nseg/2); j<1; j+=(1/apic[i].nseg)/apicalSpineDensityFactor) {
				apic[i] apicalSpine[q] = new Spine(j)
				apicalSpine[q].neck {apicalSpineList.append()}
				apicalSpine[q].head {apicalSpineList.append()}
				q+=1
			}
		}
	}
	print q, "spines apical added"
}

proc addBasalSpines(){
	
	destroyBasalSpines()	//destroy the previously created spines, if they exists

	w = 0
	while(w < sumOfBasalDendSegm){
		for(i=0; i<ndend; i+=1){ 
			for (j=(1/dend[i].nseg/2); j<1; j+=(1/dend[i].nseg)/basalSpineDensityFactor) {
				dend[i] basalSpine[w] = new Spine(j)
				basalSpine[w].neck {basalSpineList.append()}
				basalSpine[w].head {basalSpineList.append()}
				w+=1
			}
		}
	}
	print w, "spines basal added"
}

proc destroyApicalSpines(){

	for(i=0; i<q; i+=1){
		apicalSpine[i].destroy()
	}
	//apicalSpineList.remove(apicalSpineList)
}

proc destroyBasalSpines(){

	for(i=0; i<w; i+=1){
		basalSpine[i].destroy()
	}
	//basalSpineList.remove(basalSpineList)
}

proc calcAndAddApicalSpines(){
	
	calcDendSegm()
	addApicalSpines()
}

proc calcAndAddBasalSpines(){
	
	calcDendSegm()
	addBasalSpines()
}

proc colorSpine(){

//	$1 = colorIndex

	PlotShape[0].color_list(apicalSpineList, 2)
	PlotShape[0].color_list(basalSpineList, 3)
}

proc colorReset(){

	PlotShape[0].color_all(1)
}

objref ps

proc addAndVisualizeSpineLoc(){

	xpanel("Adding and visualizing spines")
	xlabel("Adding spines")
	xvalue("Apical Spine Density", "apicalSpineDensityFactor", 1, "", 0, 0)
	xvalue("Basal Spine Density", "basalSpineDensityFactor", 1, "", 0, 0)
	xlabel("Spine densities are relative to d_lambda")
	xbutton("Add Apical Spines", "calcAndAddApicalSpines()")
	xbutton("Add Basal Spines", "calcAndAddBasalSpines()")
	xbutton("Destroy Spines", "destroySpines()")
	xlabel("Visualizing spines")
	xlabel("Colour Coding:")
	xlabel("basal spines - blue // apical spines - red // oblique spines - green")
	xbutton("Colour", "colorSpine()")

	xpanel()

	ps = new PlotShape(0)
	ps.size(-123.8933,124.1733,-124.4108,123.5808)
	ps.view(-180, -100, 240, 190, 1, 350, 600, 550)
	ps.exec_menu("Show Diam")
	//ps.exec_menu("View = plot")
}

func floatComp(){
	if(abs($1-$2) <= $3){
        return 1
	} else{
        return 0
	}
}

objref normAttVecCF, dendDistVecApic, VoltageVec, TimeVec

proc calcApicalDendDist(){

	dendDistVecApic = new Vector()
	
	apicSeg = 0

	access soma{
		distance()
	}
	
	for(i=0; i<napic+noblique; i+=1){
		
		access apic[i]
		
		for(x,0){
			dendDistVecApic.append(distance(x))
			apicSeg+=1
		}
	}
}

objref dendDistVecBas

proc calcBasalDendDist(){

	dendDistVecBas = new Vector()
	
	basSeg = 0

	access soma{
		distance()
	}
	
	for(i=0; i<ndend; i+=1){
		
		access dend[i]
		
		for(x,0){
			dendDistVecBas.append(-distance(x))
			basSeg+=1
		}
	}
}

func voltAttCentrifugal_apicalOblique(){localobj DendVoltageVec, SomaVoltageVec, ampVec, secnameVec, dataMatrix, OutFile
	
	{startsw()}
	{currenttime = startsw()}
	
	init()
	
	calcApicalDendDist()
	
	access soma{
		stim1.loc(0.5)
		stim2.loc(0.5)
		stim3.loc(0.5)
		stim4.loc(0.5)
		distance()
	}
	
	ampVec = new Vector()
	normAttVecCF = new Vector()
	SomaVoltageVec = new Vector()
	secnameVec = new Vector()
	
	perc = 0
	act = 0
	
	for(i=0; i<napic+noblique; i+=1){
	
		apic[i]{
	
			for(k,0){
					
				DendVoltageVec = new Vector()
				DendVoltageVec.record(&apic[i].v(k))
					
				TimeVec = new Vector()
				VoltageVec = new Vector()
			
				TimeVec.record(&t)
				VoltageVec.record(&soma.v(0.5))
				
				run()
					
				for(j=0; j<TimeVec.size(); j+=1){
					if(floatComp(TimeVec.x[j], stim1.del, 1e-8)){
						baseline_soma_CF = VoltageVec.x[j]
						baseline_dend_CF = DendVoltageVec.x[j]
					}
						
					if(floatComp(TimeVec.x[j], stim2.del+stim2.dur, 1e-8)){
						ss_amp_soma_CF = VoltageVec.x[j]
						ss_amp_dend_CF = DendVoltageVec.x[j]
					}
					//print baseline_soma_CF, baseline_dend_CF, ss_amp_soma_CF, ss_amp_dend_CF
				}
				
				voltAmpSoma = ss_amp_soma_CF - baseline_soma_CF
				voltAmpDend = ss_amp_dend_CF - baseline_dend_CF
					
				ampVec.append(voltAmpDend)
				SomaVoltageVec.append(voltAmpSoma)
					
				normAtt = voltAmpDend/voltAmpSoma
				
				normAttVecCF.append(normAtt)
				
				secnameVec.append(i)
				
				print act+1, "/", dendDistVecApic.size(), "done"
				
				act += 1
			}
		}	
	}

	dataMatrix = new Matrix(dendDistVecApic.size(), 3)
	dataMatrix.setcol(0, dendDistVecApic)
	dataMatrix.setcol(1, normAttVecCF)
	dataMatrix.setcol(2, secnameVec)
	
	chdir("/cygdrive/l/Miki/Projects/Modeling/Models/CA1 PC/GIRK/My Model/10-passive/data/")
	
	OutFile = new File()
	
	strdef OutFileName
	
	sprint(OutFileName, "Centrifugal_Attenuation_apical_oblique_Ra=%d_Ohmcm_Rm=%d_Ohmcm2.dat", user_Ra, user_Rm)
	OutFile.wopen(OutFileName)
	dataMatrix.fprint(OutFile, " %g")
	OutFile.close()
	
	chdir("/cygdrive/l/Miki/Projects/Modeling/Models/CA1 PC/GIRK/My Model/10-passive/")
	
	{realruntime = startsw() - currenttime}
	
	print "***************************************************************"
	print "...procedure finished successfully in ", realruntime, "seconds..."
	print "***************************************************************"
	
	return 0
}

func voltAttCentrifugal_basal(){localobj DendVoltageVec, SomaVoltageVec, ampVec, secnameVec, dataMatrix, OutFile
	
	{startsw()}
	{currenttime = startsw()}
	
	init()
	
	calcBasalDendDist()
	
	access soma{
		stim1.loc(0.5)
		stim2.loc(0.5)
		stim3.loc(0.5)
		stim4.loc(0.5)
		distance()
	}
	
	ampVec = new Vector()
	normAttVecCF = new Vector()
	SomaVoltageVec = new Vector()
	secnameVec = new Vector()
	
	perc = 0
	act = 0
	
	for(i=0; i<ndend; i+=1){
	
		dend[i]{
	
			for(k,0){
					
				DendVoltageVec = new Vector()
				DendVoltageVec.record(&dend[i].v(k))
					
				TimeVec = new Vector()
				VoltageVec = new Vector()
			
				TimeVec.record(&t)
				VoltageVec.record(&soma.v(0.5))
				
				run()
					
				for(j=0; j<TimeVec.size(); j+=1){
					if(floatComp(TimeVec.x[j], stim1.del, 1e-8)){
						baseline_soma_CF = VoltageVec.x[j]
						baseline_dend_CF = DendVoltageVec.x[j]
					}
						
					if(floatComp(TimeVec.x[j], stim2.del+stim2.dur, 1e-8)){
						ss_amp_soma_CF = VoltageVec.x[j]
						ss_amp_dend_CF = DendVoltageVec.x[j]
					}
					//print baseline_soma_CF, baseline_dend_CF, ss_amp_soma_CF, ss_amp_dend_CF
				}
				
				voltAmpSoma = ss_amp_soma_CF - baseline_soma_CF
				voltAmpDend = ss_amp_dend_CF - baseline_dend_CF
					
				ampVec.append(voltAmpDend)
				SomaVoltageVec.append(voltAmpSoma)
					
				normAtt = voltAmpDend/voltAmpSoma
				
				normAttVecCF.append(normAtt)
				
				secnameVec.append(i)
				
				print act+1, "/", dendDistVecBas.size(), "done"
				
				act += 1
			}
		}	
	}

	dataMatrix = new Matrix(dendDistVecBas.size(), 3)
	dataMatrix.setcol(0, dendDistVecBas)
	dataMatrix.setcol(1, normAttVecCF)
	dataMatrix.setcol(2, secnameVec)
	
	chdir("/cygdrive/l/Miki/Projects/Modeling/Models/CA1 PC/GIRK/My Model/10-passive/data/")
	
	OutFile = new File()
	
	strdef OutFileName
	
	sprint(OutFileName, "Centrifugal_Attenuation_basalRa=%d_Ohmcm_Rm=%d_Ohmcm2.dat", user_Ra, user_Rm)
	OutFile.wopen(OutFileName)
	dataMatrix.fprint(OutFile, " %g")
	OutFile.close()
	
	chdir("/cygdrive/l/Miki/Projects/Modeling/Models/CA1 PC/GIRK/My Model/10-passive/")
	
	{realruntime = startsw() - currenttime}
	
	print "***************************************************************"
	print "...procedure finished successfully in ", realruntime, "seconds..."
	print "***************************************************************"
	
	return 0
}

objref normAttVecCP

func voltAttCentripetal_apicalOblique(){localobj DendVoltageVec, SomaVoltageVec, ampVec, secnameVec, dataMatrix, OutFile

	init()
	
	{startsw()}
	{currenttime = startsw()}
	
	calcApicalDendDist()
	
	ampVec = new Vector()
	normAttVecCP = new Vector()
	SomaVoltageVec = new Vector()
	secnameVec = new Vector()
	
	perc = 0
	act = 0
	
	for(i=0; i<napic+noblique; i+=1){
			
		access apic[i]{
		
			for(y,0){
			
				stim1.loc(y)
				stim2.loc(y)
				stim3.loc(y)
				stim4.loc(y)
			
				VoltageVec = new Vector()	
				TimeVec = new Vector()	
				
				VoltageVec.record(&soma.v(0.5))
				TimeVec.record(&t)

				DendVoltageVec = new Vector()
				DendVoltageVec.record(&apic[i].v(y))
				
				run()
				
				access apic[i]
				
				stim1.loc(y)
				stim2.loc(y)
				stim3.loc(y)
				stim4.loc(y)
				
				print secname(), distance(y), y
				
				for(j=0; j<TimeVec.size(); j+=1){
					if(floatComp(TimeVec.x[j], stim1.del, 1e-8)){
						baseline_soma_CP = VoltageVec.x[j]
						baseline_dend_CP = DendVoltageVec.x[j]
					}
							
					if(floatComp(TimeVec.x[j], stim2.del+stim2.dur, 1e-8)){
						ss_amp_soma_CP = VoltageVec.x[j]
						ss_amp_dend_CP = DendVoltageVec.x[j]
					}
				}
				
				//print baseline_soma_CP, baseline_dend_CP, ss_amp_soma_CP, ss_amp_dend_CP
				
				voltAmpDend = ss_amp_dend_CP - baseline_dend_CP
				voltAmpSoma = ss_amp_soma_CP - baseline_soma_CP
				
				ampVec.append(voltAmpDend)
				SomaVoltageVec.append(voltAmpSoma)
				
				normAtt = voltAmpSoma/voltAmpDend
				
				normAttVecCP.append(normAtt)
				
				secnameVec.append(i)
				
				//print baseline_soma_CP, baseline_dend_CP, ss_amp_soma_CP, ss_amp_dend_CP, normAtt, secname(), distance(y)
				
				print act+1, "/", dendDistVecApic.size(), "done"
					
				act += 1
			}
		}
	}
	
	dataMatrix = new Matrix(dendDistVecApic.size(), 3)
	dataMatrix.setcol(0, dendDistVecApic)
	dataMatrix.setcol(1, normAttVecCP)
	dataMatrix.setcol(2, secnameVec)
	
	chdir("/cygdrive/l/Miki/Projects/Modeling/Models/CA1 PC/GIRK/My Model/10-passive/data/")
	
	OutFile = new File()
	
	strdef OutFileName
	
	sprint(OutFileName, "Centripetal_Attenuation_apical_oblique_Ra=%d_Ohmcm_Rm=%d_Ohmcm2.dat", user_Ra, user_Rm)
	OutFile.wopen(OutFileName)
	dataMatrix.fprint(OutFile, " %g")
	OutFile.close()
	
	chdir("/cygdrive/l/Miki/Projects/Modeling/Models/CA1 PC/GIRK/My Model/10-passive/")
	
	{realruntime = startsw() - currenttime}
	
	print "***************************************************************"
	print "...procedure finished successfully in ", realruntime, "seconds..."
	print "***************************************************************"
	
	return 0
}

func voltAttCentripetal_basal(){localobj DendVoltageVec, SomaVoltageVec, ampVec, secnameVec, dataMatrix, OutFile

	init()
	
	{startsw()}
	{currenttime = startsw()}
	
	calcBasalDendDist()
	
	ampVec = new Vector()
	normAttVecCP = new Vector()
	SomaVoltageVec = new Vector()
	secnameVec = new Vector()
	
	perc = 0
	act = 0
	
	for(i=0; i<ndend; i+=1){
			
		access dend[i]{
		
			for(y,0){
			
				stim1.loc(y)
				stim2.loc(y)
				stim3.loc(y)
				stim4.loc(y)
			
				VoltageVec = new Vector()	
				TimeVec = new Vector()	
				
				VoltageVec.record(&soma.v(0.5))
				TimeVec.record(&t)

				DendVoltageVec = new Vector()
				DendVoltageVec.record(&dend[i].v(y))
				
				run()
				
				access dend[i]
				
				stim1.loc(y)
				stim2.loc(y)
				stim3.loc(y)
				stim4.loc(y)
				
				print secname(), distance(y), y
				
				for(j=0; j<TimeVec.size(); j+=1){
					if(floatComp(TimeVec.x[j], stim1.del, 1e-8)){
						baseline_soma_CP = VoltageVec.x[j]
						baseline_dend_CP = DendVoltageVec.x[j]
					}
							
					if(floatComp(TimeVec.x[j], stim2.del+stim2.dur, 1e-8)){
						ss_amp_soma_CP = VoltageVec.x[j]
						ss_amp_dend_CP = DendVoltageVec.x[j]
					}
				}
				
				//print baseline_soma_CP, baseline_dend_CP, ss_amp_soma_CP, ss_amp_dend_CP
				
				voltAmpDend = ss_amp_dend_CP - baseline_dend_CP
				voltAmpSoma = ss_amp_soma_CP - baseline_soma_CP
				
				ampVec.append(voltAmpDend)
				SomaVoltageVec.append(voltAmpSoma)
				
				normAtt = voltAmpSoma/voltAmpDend
				
				normAttVecCP.append(normAtt)
				
				secnameVec.append(i)
				
				//print baseline_soma_CP, baseline_dend_CP, ss_amp_soma_CP, ss_amp_dend_CP, normAtt, secname(), distance(y)
				
				print act+1, "/", dendDistVecBas.size(), "done"
					
				act += 1
			}
		}
	}
	
	dataMatrix = new Matrix(dendDistVecBas.size(), 3)
	dataMatrix.setcol(0, dendDistVecBas)
	dataMatrix.setcol(1, normAttVecCP)
	dataMatrix.setcol(2, secnameVec)
	
	chdir("/cygdrive/l/Miki/Projects/Modeling/Models/CA1 PC/GIRK/My Model/10-passive/data/")
	
	OutFile = new File()
	
	strdef OutFileName
	
	sprint(OutFileName, "Centripetal_Attenuation_basal_Ra=%d_Ohmcm_Rm=%d_Ohmcm2.dat", user_Ra, user_Rm)
	OutFile.wopen(OutFileName)
	dataMatrix.fprint(OutFile, " %g")
	OutFile.close()
	
	chdir("/cygdrive/l/Miki/Projects/Modeling/Models/CA1 PC/GIRK/My Model/10-passive/")
	
	{realruntime = startsw() - currenttime}
	
	print "***************************************************************"
	print "...procedure finished successfully in ", realruntime, "seconds..."
	print "***************************************************************"
	
	return 0
}


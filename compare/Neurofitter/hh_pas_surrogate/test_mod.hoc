// function to load parameters from file // expects one argument: a string that contains the file name 
proc newparams() { localobj fil setting 
fil = new File() 
fil.ropen($s1) // First line of the file contains "run parameters" we are not interested in // FIXME: not the most elegant way to skip a value, very dependent on what neurofitter write in the file and how 
setting = fil.scanvar() //neurofitter can pass argument to neuron this wayy
gnabar_hh = fil.scanvar() //0.383389
gkbar_hh = fil.scanvar() //0.0303824
gl_hh=fil.scanvar() //0.000587958
fil.close() } 
// XP parameters, from t=0 to t=1000, step of 0.1 

tstop=1000 
t=0 
// cell parameters 
create soma
insert hh

soma diam=10
 

// stimulation parameters 
objref stim 
access soma 
stim=new IClamp(0.5) 
stim.del=200
stim.amp=0.2
stim.dur=500 

// Load parameters from the file kindly created by neurofitter 
// Note: neurofitter runs neuron in the model folder, we don't have to deal with the complete path 
newparams("params.dat") 
print "gnabar_hh:" 
gnabar_hh 
print "gkbar_hh:" 
gkbar_hh 
// two values to record: time and voltage 
objref rect, recv 
rect = new Vector() 
recv = new Vector() 
// associate vectors to their targets 
rect.record(&t) // straight in the middle of the cell 
recv.record(&soma.v(0.5)) // initialize the run 
finitialize() // run the simulation 
while(t<tstop){ 
fadvance() 
} // export to file 
objref savdata 
savdata = new File() // will write in the .hoc place // Note: ...a far better way to resolve the filename: read it from params.dat 
savdata.wopen("output_Run0.dat") // use a matrix to speed up the write 
objref tempmatrix 
tempmatrix = new Matrix() 
tempmatrix.resize(recv.size(),2) 
tempmatrix.setcol(0, rect) 
tempmatrix.setcol(1, recv) // 0 as first argument: doesn't write the size of the matrix on the first line 
tempmatrix.fprint(0, savdata, " %g") // ...and we close the file, good guess 
savdata.close()
